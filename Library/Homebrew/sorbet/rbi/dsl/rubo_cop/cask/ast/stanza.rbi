# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `RuboCop::Cask::AST::Stanza`.
# Please instead update this file by running `bin/tapioca dsl RuboCop::Cask::AST::Stanza`.


class RuboCop::Cask::AST::Stanza
  sig { returns(T::Boolean) }
  def app?; end

  sig { returns(T::Boolean) }
  def appcast?; end

  sig { returns(T::Boolean) }
  def arch?; end

  sig { params(args: T.untyped, block: T.untyped).returns(T::Boolean) }
  def arch_variable?(*args, &block); end

  sig { returns(T::Boolean) }
  def artifact?; end

  sig { returns(T::Boolean) }
  def audio_unit_plugin?; end

  sig { returns(T::Boolean) }
  def auto_updates?; end

  sig { returns(T::Boolean) }
  def bash_completion?; end

  sig { returns(T::Boolean) }
  def binary?; end

  sig { returns(T::Boolean) }
  def caveats?; end

  sig { returns(T::Boolean) }
  def colorpicker?; end

  sig { returns(T::Boolean) }
  def conflicts_with?; end

  sig { returns(T::Boolean) }
  def container?; end

  sig { returns(T::Boolean) }
  def depends_on?; end

  sig { returns(T::Boolean) }
  def desc?; end

  sig { returns(T::Boolean) }
  def dictionary?; end

  sig { returns(T::Boolean) }
  def fish_completion?; end

  sig { returns(T::Boolean) }
  def font?; end

  sig { returns(T::Boolean) }
  def homepage?; end

  sig { returns(T::Boolean) }
  def input_method?; end

  sig { returns(T::Boolean) }
  def installer?; end

  sig { returns(T::Boolean) }
  def internet_plugin?; end

  sig { returns(T::Boolean) }
  def keyboard_layout?; end

  sig { returns(T::Boolean) }
  def language?; end

  sig { returns(T::Boolean) }
  def livecheck?; end

  sig { returns(T::Boolean) }
  def manpage?; end

  sig { returns(T::Boolean) }
  def mdimporter?; end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(T::Boolean) }
  def on_arch_conditional?; end

  sig { returns(T::Boolean) }
  def on_arm?; end

  sig { returns(T::Boolean) }
  def on_big_sur?; end

  sig { returns(T::Boolean) }
  def on_catalina?; end

  sig { returns(T::Boolean) }
  def on_el_capitan?; end

  sig { returns(T::Boolean) }
  def on_high_sierra?; end

  sig { returns(T::Boolean) }
  def on_intel?; end

  sig { returns(T::Boolean) }
  def on_mojave?; end

  sig { returns(T::Boolean) }
  def on_monterey?; end

  sig { returns(T::Boolean) }
  def on_sequoia?; end

  sig { returns(T::Boolean) }
  def on_sierra?; end

  sig { returns(T::Boolean) }
  def on_sonoma?; end

  sig { params(args: T.untyped, block: T.untyped).returns(T::Boolean) }
  def on_system_block?(*args, &block); end

  sig { returns(T::Boolean) }
  def on_tahoe?; end

  sig { returns(T::Boolean) }
  def on_ventura?; end

  sig { returns(T::Boolean) }
  def os?; end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def parent_node(*args, &block); end

  sig { returns(T::Boolean) }
  def pkg?; end

  sig { returns(T::Boolean) }
  def postflight?; end

  sig { returns(T::Boolean) }
  def preflight?; end

  sig { returns(T::Boolean) }
  def prefpane?; end

  sig { returns(T::Boolean) }
  def qlplugin?; end

  sig { returns(T::Boolean) }
  def screen_saver?; end

  sig { returns(T::Boolean) }
  def service?; end

  sig { returns(T::Boolean) }
  def sha256?; end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def source(*args, &block); end

  sig { params(args: T.untyped, block: T.untyped).returns(T.untyped) }
  def source_with_comments(*args, &block); end

  sig { returns(T::Boolean) }
  def stage_only?; end

  sig { returns(T::Boolean) }
  def suite?; end

  sig { returns(T::Boolean) }
  def uninstall?; end

  sig { returns(T::Boolean) }
  def uninstall_postflight?; end

  sig { returns(T::Boolean) }
  def uninstall_preflight?; end

  sig { returns(T::Boolean) }
  def url?; end

  sig { returns(T::Boolean) }
  def version?; end

  sig { returns(T::Boolean) }
  def vst3_plugin?; end

  sig { returns(T::Boolean) }
  def vst_plugin?; end

  sig { returns(T::Boolean) }
  def zap?; end

  sig { returns(T::Boolean) }
  def zsh_completion?; end
end
